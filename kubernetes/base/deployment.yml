# base/deployment.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: springboot-app
  namespace: springboot-app
spec:
  selector:
    matchLabels:
      app: springboot-app
  template:
    metadata:
      labels:
        app: springboot-app
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/actuator/prometheus"
        prometheus.io/port: "8080"
    spec:
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: springboot-app
          image: your-registry/springboot-app:latest
          imagePullPolicy: Always
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            runAsUser: 1000
            runAsGroup: 3000
            readOnlyRootFilesystem: true
          ports:
            - containerPort: 8080
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1000m"
          env:
            - name: SPRING_PROFILES_ACTIVE
              valueFrom:
                configMapKeyRef:
                  name: springboot-config
                  key: SPRING_PROFILES_ACTIVE
            # JDBC 설정
            - name: SPRING_DATASOURCE_URL
              valueFrom:
                configMapKeyRef:
                  name: springboot-config
                  key: SPRING_DATASOURCE_URL
            - name: SPRING_DATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: springboot-secrets
                  key: DATABASE_USERNAME
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: springboot-secrets
                  key: DATABASE_PASSWORD
            # JWT 설정
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: springboot-secrets
                  key: JWT_SECRET
            - name: JWT_EXPIRATION
              valueFrom:
                configMapKeyRef:
                  name: springboot-config
                  key: JWT_EXPIRATION
            # JPA 설정
            - name: SPRING_JPA_HIBERNATE_DDL_AUTO
              valueFrom:
                configMapKeyRef:
                  name: springboot-config
                  key: SPRING_JPA_HIBERNATE_DDL_AUTO
            - name: SPRING_JPA_SHOW_SQL
              valueFrom:
                configMapKeyRef:
                  name: springboot-config
                  key: SPRING_JPA_SHOW_SQL
            # 로깅 설정
            - name: LOGGING_LEVEL_ROOT
              valueFrom:
                configMapKeyRef:
                  name: springboot-config
                  key: LOGGING_LEVEL_ROOT
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
          startupProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            failureThreshold: 30
            periodSeconds: 10
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: app-logs
              mountPath: /logs
      volumes:
        - name: tmp
          emptyDir: {}
        - name: app-logs
          emptyDir: {}
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              app: springboot-app